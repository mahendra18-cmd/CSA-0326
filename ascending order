#include <stdio.h>
#define MAX 100

int stack1[MAX], stack2[MAX];
int top1 = -1, top2 = -1;

void push(int stack[], int *top, int val) {
    stack[++(*top)] = val;
}

int pop(int stack[], int *top) {
    return stack[(*top)--];
}

int peek(int stack[], int top) {
    return stack[top];
}

int isEmpty(int top) {
    return top == -1;
}

void sortStack() {
    while (!isEmpty(top1)) {
        int temp = pop(stack1, &top1);
        while (!isEmpty(top2) && peek(stack2, top2) > temp)
            push(stack1, &top1, pop(stack2, &top2));
        push(stack2, &top2, temp);
    }

    // Transfer back to stack1 if needed
    while (!isEmpty(top2))
        push(stack1, &top1, pop(stack2, &top2));
}

void display() {
    for (int i = top1; i >= 0; i--)
        printf("%d ", stack1[i]);
    printf("\n");
}

int main() {
    int n, val;
    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter %d numbers:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &val);
        push(stack1, &top1, val);
    }

    printf("Original Stack:\n");
    display();

    sortStack();

    printf("Sorted Stack (Ascending):\n");
    display();
    return 0;
}









OUTPUT:



Enter number of elements: 5
Enter 5 numbers:
3 1 4 2 5
Original Stack:
5 2 4 1 3
Sorted Stack (Descending):
5 4 3 2 1
